(function() {

#define ISEQ_STATUS_NORMAL 0
#define ISEQ_STATUS_RAISE  1
#define ISEQ_STATUS_RETRY  2
#define ISEQ_STATUS_RETURN 3

var StackFrame = function(iseq, opts) {
  this.iseq      = iseq;
  this.ip        = 0;
  this.sp        = 0;
  this.modules   = [];
  this.status    = ISEQ_STATUS_NORMAL;
  this.stack     = opts.stackSize ? new Array(opts.stackSize) : [];
  this.self      = opts.self || Bully.main;
  this.parent    = opts.parent || null;
  this.locals    = opts.locals || [];
  this.isDynamic = !!opts.isDynamic;

  return this;
};

StackFrame.prototype = {
  toString: function() {
    var a = [], obj, i;

    for (i = 0; i < this.sp; i++) {
      obj = this.stack[i];
      if (obj === null) {
        a.push('nil');
      }
      else {
        a.push(obj.toString());
      }
    }

    return a.toString();
  },

  push: function(obj) {
    this.stack[this.sp++] = obj;
    return this;
  },

  pop: function() {
    return this.stack[--this.sp];
  },

  peek: function() {
    return this.stack[this.sp - 1];
  },

  currentModule: function() {
    var len = this.modules.length;

    return len === 0 ? Bully.Object : this.modules[len - 1];
  }
};

Bully.VM = {
  frames: [],

  currentFrame: function() {
    return this.frames[this.frames.length - 1];
  },

  pushFrame: function(frame) {
    this.frames.push(frame);
    return this;
  },

  popFrame: function() {
    return this.frames.pop();
  },

  // Runs a compiled Bully program.
  run: function(iseq) {
    this.frames = [];

    this.runISeq(iseq, [], { self: Bully.main });
  },

  runISeq: function(iseq, args, sfOpts) {
    var body   = iseq[ISEQ_BODY_IDX],
        len    = body.length,
        sf, startLabel, ins, recv, sendargs, mod, stackiseq, klass, i, localSF,
        ex;

    // process labels
    if (!iseq.labels) {
      iseq.labels = {};
      for (i = 0; i < len; i++) {
        ins = body[i];
        if (typeof ins === 'string') { iseq.labels[ins] = i; }
      }
    }

    sf = new StackFrame(iseq, sfOpts);
    sf.stackSize = iseq[ISEQ_MAX_STACK_IDX];
    this.pushFrame(sf);

    if ((startLabel = this.setupArguments(iseq, args, sf))) {
      sf.ip = iseq.labels[startLabel];
    }

    main_loop:
    for (; sf.ip < len; sf.ip++) {
      ins = body[sf.ip];

      if (typeof ins !== 'object') { continue; }

      switch (ins[0]) {
        case 'pop':
          sf.pop();
          break;
        case 'putnil':
          sf.push(null);
          break;
        case 'putself':
          sf.push(sf.self);
          break;
        case 'putbuiltin':
          sf.push(Bully[ins[1]]);
          break;
        case 'putcurrentmodule':
          sf.push(sf.currentModule());
          break;
        case 'putiseq':
          sf.push(ins[1]);
          break;
        case 'putobject':
          sf.push(ins[1]);
          break;
        case 'putstring':
          sf.push(Bully.String.make(ins[1]));
          break;
        case 'definemethod':
          stackiseq = sf.pop();
          mod       = sf.pop();
          Bully.define_method(mod, ins[1], stackiseq);
          break;
        case 'send':
          sendargs = [];
          for (i = 0; i < ins[2]; i += 1) { sendargs.unshift(sf.pop()); }
          recv = sf.pop();
          this.sendMethod(recv, ins[1], sendargs, sf);
          break;
        case 'setlocal':
          localSF = sf;
          while (localSF.isDynamic) { localSF = localSF.parent; }
          localSF.locals[ins[1]] = sf.pop();
          break;
        case 'getlocal':
          localSF = sf;
          while (localSF.isDynamic) { localSF = localSF.parent; }
          sf.push(localSF.locals[ins[1]]);
          break;
        case 'setdynamic':
          localSF = sf;
          for (i = 0; i < ins[2]; i++) { localSF = localSF.parent; }
          localSF.locals[ins[1]] = sf.pop();
          break;
        case 'getdynamic':
          localSF = sf;
          for (i = 0; i < ins[2]; i++) { localSF = localSF.parent; }
          sf.push(localSF.locals[ins[1]]);
          break;
        case 'getconstant':
          klass = sf.pop();
          sf.push(this.getConstant(klass, ins[1]));
          break;
        case 'branchif':
          if (Bully.test(sf.pop())) { sf.ip = iseq.labels[ins[1]]; }
          break;
        case 'branchunless':
          if (!Bully.test(sf.pop())) { sf.ip = iseq.labels[ins[1]]; }
          break;
        case 'jump':
          sf.ip = iseq.labels[ins[1]];
          break;
        case 'throw':
          this._throw(sf.pop(), ins[1]);
          break;
        case 'leave':
          break main_loop;
        default:
          throw new Error('unknown opcode: ' + ins[0]);
      }

      // check to see if an exception was raised or bubbled up
      if (sf.status === ISEQ_STATUS_RAISE) {
        this.handleException();

        if (sf.status === ISEQ_STATUS_RAISE) {
          break main_loop;
        }
      }
    }

    // copy the current status and stack to the parent stack
    if (sf.parent) {
      sf.parent.status = sf.status;
      for (i = 0; i < sf.sp; i++) {
        sf.parent.push(sf.stack[i]);
      }
    }
    else if (sf.status === ISEQ_STATUS_RAISE) {
      send(Bully.main, 'p', sf.pop());
      Bully.platform.exit(1);
    }

    this.popFrame();
  },

  setupArguments: function(iseq, args, sf) {
    var nargs  = args.length,
        desc   = iseq[ISEQ_ARGS_IDX],
        nreq   = desc[ISEQ_ARGS_NUM_REQ_IDX],
        nopt   = desc[ISEQ_ARGS_NUM_OPT_IDX],
        splat  = desc[ISEQ_ARGS_SPLAT_IDX],
        labels = desc[ISEQ_ARGS_LABELS_IDX],
        start  = null,
        i;

    // FIXME: check number of arguments passed

    // copy arguments to local variables
    for (i = 0; i < nargs; i++) {
      sf.locals[i] = args[i];
    }

    if (splat >= 0) {
      sf.locals[splat] = Bully.Array.make(args.slice(nreq + nopt));
    }

    if (nopt > 0) {
      return nargs >= nreq + nopt ? labels[labels.length - 1] :
        labels[nargs - nreq];
    }

    return null;
  },

  sendMethod: function(recv, name, args, sf) {
    var method = Bully.find_method(Bully.class_of(recv), name),
        status;

    // FIXME: make sure method is found

    if (typeof method === 'function') {
      // FIXME: this may not capture all raised exceptions (ex. those raised by define_class)
      try {
        sf.push(method.call(null, recv, args));
      }
      catch (e) {
        if (e instanceof Bully.RaiseException) {
          sf.status = ISEQ_STATUS_RAISE;
          sf.push(e.exception);
        }
        else { throw e; }
      }
    }
    else {
      this.runISeq(method, args, { parent: sf, self: recv });
    }
  },

  getConstant: function(klass, name) {
    var modules;

    if (!klass) {
      // FIXME: perform lexical lookup
      return Bully.const_get(Bully.Object, name);
    }
    else {
      return Bully.const_get(klass, name);
    }
  },

  handleException: function(ex) {
    var sf          = this.currentFrame(),
        rescueEntry = this._findCatchEntry('rescue', sf),
        ensureEntry = this._findCatchEntry('ensure', sf)
        ex;

    if (!rescueEntry && !ensureEntry) { return; }

    ex = sf.pop();

    if (rescueEntry) {
      sf.sp = rescueEntry[CATCH_ENTRY_SP_IDX];
      this.runISeq(rescueEntry[CATCH_ENTRY_ISEQ_IDX], [],
        { parent: sf, self: sf.self, isDynamic: true, locals: [ex] });

      if (sf.status === ISEQ_STATUS_NORMAL) {
        // the exception was rescued, so set the instuction pointer to the
        // entry's continue label and continue executing the current frame
        sf.ip = sf.iseq.labels[rescueEntry[CATCH_ENTRY_CONT_LBL_IDX]];
        return;
      }
      else if (ensureEntry) {
        // the exception has not been handled yet, but its possible its been
        // replaced by another raise within the rescue block, so we need to
        // get the new exception object to give to the ensure block
        ex = sf.pop();
      }
    }

    // the exception hasn't been rescued yet, so run the matching ensure entry
    // if it exists and let the exception bubble up
    if (ensureEntry) {
      sf.sp = ensureEntry[CATCH_ENTRY_SP_IDX];
      this.runISeq(ensureEntry[CATCH_ENTRY_ISEQ_IDX], [],
        { parent: sf, self: sf.self, isDynamic: true, locals: [ex] });
      sf.ip = sf.iseq.labels[ensureEntry[CATCH_ENTRY_CONT_LBL_IDX]];
    }
  },

  _findCatchEntry: function(type, sf) {
    var catchTbl = sf.iseq[ISEQ_CATCH_TBL_IDX], len = catchTbl.length,
        entry, entryType, start, stop, i;

    for (i = 0; i < len; i++) {
      entry     = catchTbl[i];
      entryType = entry[CATCH_ENTRY_TYPE_IDX];
      start     = sf.iseq.labels[entry[CATCH_ENTRY_START_LBL_IDX]];
      stop      = sf.iseq.labels[entry[CATCH_ENTRY_STOP_LBL_IDX]];

      if (entryType === type && start <= sf.ip && sf.ip <= stop) {
        return entry;
      }
    }

    return null;
  },

  _throw: function(obj, throwType) {
    var sf = this.currentFrame();

    switch (throwType) {
      case VM_THROW_TYPE_RAISE:
        sf.status = ISEQ_STATUS_RAISE;
        sf.push(obj);
        return;
      case VM_THROW_TYPE_RETRY:
        break;
      default:
        throw new Error('invalid throw type: ' + throwType);
    }
  }
};

}());

