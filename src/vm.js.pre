(function() {

var StackFrame = function(opts) {
  this.sp      = 0;
  this.stack   = [];
  this.self    = opts.self || Bully.main;
  this.modules = []
  this.parent  = opts.parent || null;
  this.locals  = [];
};

StackFrame.prototype = {
  toString: function() {
    var a = [], obj, i;

    for (i = 0; i < this.sp; i++) {
      obj = this.stack[i];
      if (obj === null) {
        a.push('nil');
      }
      else {
        a.push(obj.toString());
      }
    }

    return a.toString();
  },

  push: function(obj) {
    this.stack[this.sp++] = obj;
    return this;
  },

  pop: function() {
    return this.stack[--this.sp];
  },

  currentModule: function() {
    var len = this.modules.length;

    return len === 0 ? Bully.Object : this.modules[len - 1];
  }
};

Bully.VM = {
  // Runs a compiled Bully program.
  run: function(iseq) {
    return this.runISeq(iseq, [], { self: Bully.main });
  },

  runISeq: function(iseq, args, sfOpts) {
    var body = iseq[ISEQ_BODY_IDX], len = body.length,
        sf, ip, ins, recv, args, mod, stackiseq, i;

    // process labels
    if (!iseq.labels) {
      iseq.labels = {};
      for (ip = 0; ip < len; ip++) {
        ins = body[ip];
        if (typeof ins === 'string') { iseq.labels[ins] = ip; }
      }
    }

    sf = new StackFrame(sfOpts);

    // FIXME: check argument count

    // copy arguments to local variables
    for (i = 0; i < args.length; i++) {
      sf.locals[i] = args[i];
    }

    for (ip = 0; ip < len; ip += 1) {
      ins = body[ip];

      if (typeof ins !== 'object') { continue };

      switch (ins[0]) {
        case 'pop':
          sf.pop();
          break;
        case 'putnil':
          sf.push(null);
          break;
        case 'putcurrentmodule':
          sf.push(sf.currentModule());
          break;
        case 'putiseq':
          sf.push(ins[1]);
          break;
        case 'putobject':
          sf.push(ins[1]);
          break;
        case 'putstring':
          sf.push(Bully.String.make(ins[1]));
          break;
        case 'definemethod':
          stackiseq = sf.pop();
          mod       = sf.pop();
          Bully.define_method(mod, ins[1], stackiseq);
          break;
        case 'send':
          args = [];
          for (i = 0; i < ins[2]; i += 1) { args.unshift(sf.pop()); }
          recv = sf.pop() || sf.self;
          this.sendMethod(recv, ins[1], args, sf);
          break;
        case 'setlocal':
          sf.locals[ins[1]] = sf.pop();
          break;
        case 'getlocal':
          sf.push(sf.locals[ins[1]]);
          break;
        case 'branchunless':
          if (!Bully.test(sf.pop())) { ip = iseq.labels[ins[1]]; }
          break;
        case 'jump':
          ip = iseq.labels[ins[1]];
          break;
        default:
          throw 'invalid opcode: ' + ins[0];
      }
    }

    // copy the current stack to the parent stack
    if (sf.parent) {
      for (i = 0; i < sf.sp; i++) { sf.parent.push(sf.stack[i]); }
    }
  },

  sendMethod: function(recv, name, args, sf) {
    var method = Bully.find_method(Bully.class_of(recv), name);

    if (typeof method === 'function') {
      sf.push(method.call(null, recv, args));
    }
    else {
      this.runISeq(method, args, { parent: sf, self: recv });
    }
  }
};

})();

