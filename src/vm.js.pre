Bully.VM = {
  run: function(iseq, parent) {
    var sf = new Bully.VM.StackFrame(), i;
    sf.parent = parent;
    this.runISeq(iseq, sf);

    if (parent) {
      for (i = 0; i < sf.sp; i++) {
        parent.push(sf.stack[i]);
      }
    }

    return 0;
  },

  runISeq: function(iseq, sf) {
    var vm = this, len = iseq.length, ip, ins, recv, args, mod, body, i;

    for (ip = 0; ip < len; ip += 1) {
      ins = iseq[ip];

      switch (ins[0]) {
        case 'putnil':
          sf.push(null);
          break;
        case 'putcurrentmodule':
          sf.push(sf.currentModule());
          break;
        case 'putiseq':
          sf.push(ins[1]);
          break;
        case 'putobject':
          sf.push(ins[1]);
          break;
        case 'definemethod':
          body = sf.pop();
          mod  = sf.pop();
          Bully.define_method(mod, ins[1], body);
          break;
        case 'send':
          args = [];
          for (i = 0; i < ins[2]; i += 1) { args.unshift(sf.pop()); }
          recv = sf.pop() || sf.self;
          //sf.push(Bully.dispatch_method(rec, ins[1], args));
          this.sendMethod(recv, ins[1], args, sf);
          break;
        default:
          throw 'invalid opcode: ' + ins[0];
      }
    }
  },

  sendMethod: function(recv, name, args, sf) {
    var method = Bully.find_method(Bully.class_of(recv), name);

    if (typeof method === 'function') {
      sf.push(method.call(null, recv, args));
    }
    else {
      this.run(method, sf);
    }
  }
};

Bully.VM.StackFrame = function() {
  this.sp      = 0;
  this.stack   = [];
  this.self    = Bully.main;
  this.modules = []
  this.parent  = null;
};

Bully.VM.StackFrame.prototype = {
  toString: function() {
    var a = [], obj, i;

    for (i = 0; i < this.sp; i++) {
      obj = this.stack[i];
      if (obj === null) {
        a.push('nil');
      }
      else {
        a.push(obj.toString());
      }
    }

    return a.toString();
  },

  push: function(obj) {
    this.stack[this.sp++] = obj;
    return this;
  },

  pop: function() {
    return this.stack[--this.sp];
  },

  currentModule: function() {
    var len = this.modules.length;

    return len === 0 ? Bully.Object : this.modules[len - 1];
  }
};

