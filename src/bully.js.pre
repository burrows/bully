exports.Bully = Bully = {};

#define send(obj, name, ...) Bully.dispatch_method(obj, name, [__VA_ARGS__])

#include "runtime.js.pre"
#include "object.js.pre"
#include "module.js.pre"
#include "class.js.pre"
#include "main.js.pre"
#include "nil.js.pre"
#include "boolean.js.pre"
#include "symbol.js.pre"
#include "string.js.pre"
#include "error.js.pre"
#include "array.js.pre"
#include "hash.js.pre"
#include "number.js.pre"
#include "enumerable.js.pre"
#include "platform/node.js.pre"
#include "eval.js.pre"

#include "lexer.js.pre"
#include "rewriter.js.pre"
#include "parser.js"

#include "bully_module.js.pre"

Bully.parser.lexer = {
  lex: function() {
    var token = this.tokens[this.pos] || [""];
    this.pos = this.pos + 1;
    this.yylineno = token[2];
    this.yytext = token[1];
    return token[0];
  },
  setInput: function(tokens) {
    this.tokens = tokens;
    this.pos = 0;
  },
  upcomingInput: function() { return ""; },
  showPosition: function() { return this.pos; }
};

Bully.parser.yy = {
  buildLocalCompoundAssign: function (op, name, expr) {
    var basic_op = op.slice(0, op.length - 1),
        logical  = ['||=', '&&='],
        math     = ['+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '&=', '|=', '^='];

    if (logical.indexOf(op) !== -1) {
      return {type: 'LocalAssign', name: name, expression: {type: 'Logical', operator: basic_op, expressions: [{type: 'Call', expression: null, name: name, args: null, block_arg: null, block: null}, expr]}};
    }
    else if (math.indexOf(op) !== -1) {
      return {type: 'LocalAssign', name: name, expression: {type: 'Call', expression: {type: 'Call', expression: null, name: name, args: null, block_arg: null, block: null}, name: basic_op, args: [expr], block: null}};
    }
  }
};

Bully.init();

