Bully.Rewriter = function(tokens) {
  this.tokens = tokens;
  this.index  = -1;
  return this;
};

Bully.Rewriter.KEYWORDS_ALLOWED_AS_METHODS = [ 'CLASS' ];

Bully.Rewriter.prototype = {
  rewrite: function() {
    this.rewrite_keyword_method_calls();
    this.remove_extra_newlines();
    this.add_implicit_parentheses();
    this.remove_spaces();
    return this.tokens;
  },

  current: function() {
    return this.tokens[this.index];
  },

  next: function() {
    this.index += 1;
    return this.tokens[this.index];
  },

  prev: function() {
    this.index -= 1;
    return this.tokens[this.index];
  },

  peek: function(offset) {
    offset = offset === undefined ? 1 : offset;
    return this.tokens[this.index + offset];
  },

  reset: function(index) {
    this.index = index === undefined ? -1 : index;
  },

  insert_before: function(token) {
    this.tokens.splice(this.index, 0, token);
  },

  insert_after: function(token) {
    this.tokens.splice(this.index + 1, 0, token);
  },

  remove: function(offset) {
    offset = offset === undefined ? 0 : offset;
    this.tokens.splice(this.index + offset, 1);
  },

  remove_extra_newlines: function() {
    var token;

    while ((token = this.next())) {
      if (token[0] === '{' || token[0] === '[') {
        while ((token = this.peek()) && token[0] === 'NEWLINE' || token[0] === 'SPACE') { this.remove(1); }
      }
      else if (token[0] === '}' || token[0] === ']') {
        while ((token = this.prev()) && token[0] === 'NEWLINE' || token[0] === 'SPACE') { this.remove(); }
        this.next();
      }
      else if (token[0] === ',') {
        while ((token = this.prev()) && token[0] === 'NEWLINE' || token[0] === 'SPACE') { this.remove(); }
        this.next();
        while ((token = this.peek()) && token[0] === 'NEWLINE' || token[0] === 'SPACE') { this.remove(1); }
      }
    }

    this.reset();
  },

  rewrite_keyword_method_calls: function() {
    var t1, t2;

    while ((t1 = this.next()) && (t2 = this.peek())) {
      if ((t1[0] === '.' || t1[0] === 'DEF') &&
          Bully.Rewriter.KEYWORDS_ALLOWED_AS_METHODS.indexOf(t2[0]) !== -1) {
        t2[0] = 'IDENTIFIER';
      }
    }

    this.reset();
  },

  add_implicit_parentheses: function() {
    var cur, idx;

    while ((cur = this.next())) {
      if (this._is_open_paren_match()) {
        idx = this.index;

        this.insert_before(['(', '(', cur[2]]);
        this._advance_to_implicit_close_paren();
        this.insert_after([')', ')', this.current()[2]]);
        this.reset(idx);
      }
    }

    this.reset();
  },

  _is_open_paren_match: function() {
    var prev   = this.peek(-1),
        cur    = this.current(),
        next   = this.peek(),
        next2  = this.peek(2),
        before = ['IDENTIFIER', 'SUPER', 'YIELD'],
        after  = ['IDENTIFIER', 'SELF', 'NUMBER', 'STRING', 'SYMBOL', 'CONSTANT', '@', '[', '::'];

    if (!prev || !cur || !next) { return false; }

    if (before.indexOf(prev[0]) !== -1 && cur[0] === 'SPACE') {
      if (after.indexOf(next[0]) !== -1) { return true; }

      // handle block and splat params
      //   foo *x
      //   foo &b
      if ((next[0] === '&' || next[0] === '*') && next2 && next2[0] !== 'SPACE') {
        return true;
      }
      if (next[0] === ':' && next2 && next2[0] === 'STRING') {
        return true;
      }
    }

    return false;
  },

  _advance_to_implicit_close_paren: function() {
    var end_tokens = [';', 'NEWLINE', '}', 'DO', 'END'],
        cur, prev, opens;

    while ((cur = this.next())) {
      prev = this.peek(-1);
      prev = prev[0] === 'SPACE' ? this.peek(-2) : prev;

      if (end_tokens.indexOf(cur[0]) !== -1) {
        this.prev();
        return;
      }

      if (cur[0] === '[') {
        // advance to matching close bracket
        opens = 1;
        while (opens > 0 && (cur = this.next())) {
          if (cur[0] === '[') {
            opens += 1;
          }
          else if (cur[0] === ']') {
            opens -= 1;
          }
        }
        continue;
      }

      if (cur[0] === '{') {
        // advance to matching close bracket
        opens = 1;
        while (opens > 0 && (cur = this.next())) {
          if (cur[0] === '{') {
            opens += 1;
          }
          else if (cur[0] === '}') {
            opens -= 1;
          }
        }
      }
    }

    // we made it to the end of the file, back up one so that we can insert the
    // close paren after the current token
    this.prev();

    return;
  },

  remove_spaces: function() {
    var token;

    while ((token = this.next())) {
      if (token[0] === 'SPACE') { this.remove(); }
    }

    this.reset();
  }
};

