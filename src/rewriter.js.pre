
Bully.Rewriter = function(tokens) {
  this.tokens = tokens;
  this.index  = -1;
  return this;
};

Bully.Rewriter.KEYWORDS_ALLOWED_AS_METHODS = [ 'CLASS' ];
Bully.Rewriter.IMPLICIT_OPEN_PAREN_BEFORE  = [ 'IDENTIFIER', 'SUPER', 'YIELD' ];
Bully.Rewriter.IMPLICIT_OPEN_PAREN_AFTER   = [ 'IDENTIFIER', 'SELF', 'NUMBER', 'STRING', 'SYMBOL', 'CONSTANT', '@' ];
Bully.Rewriter.IMPLICIT_CLOSE_PAREN        = [ 'NEWLINE', ';', 'DO', 'END', '{', '}' ];

Bully.Rewriter.prototype = {
  rewrite: function() {
    this.remove_extra_newlines();
    this.rewrite_keyword_method_calls();
    this.add_implicit_parentheses();
    return this.tokens;
  },

  next: function() {
    this.index += 1;
    return this.tokens[this.index];
  },

  prev: function() {
    this.index -= 1;
    return this.tokens[this.index];
  },

  peak: function() {
    return this.tokens[this.index + 1];
  },

  reset: function(index) {
    this.index = index === undefined ? -1 : index;
  },

  insert_before: function(token) {
    this.tokens.splice(this.index, 0, token);
  },

  insert_after: function(token) {
    this.tokens.splice(this.index + 1, 0, token);
  },

  remove: function() {
    this.tokens.splice(this.index, 1);
  },

  remove_extra_newlines: function() {
    var token;

    while ((token = this.next())) {
      if (token[0] === '{' || token[0] === '[') {
        while ((token = this.next()) && token[0] === 'NEWLINE') { this.remove(); }
      }
      else if (token[0] === '}' || token[0] === ']') {
        while ((token = this.prev()) && token[0] === 'NEWLINE') { this.remove(); }
        this.next();
      }
      else if (token[0] === ',') {
        while ((token = this.prev()) && token[0] === 'NEWLINE') { this.remove(); }
        this.next();
        while ((token = this.next()) && token[0] === 'NEWLINE') { this.remove(); }
      }
    }

    this.reset();
  },

  rewrite_keyword_method_calls: function() {
    var t1, t2;

    while ((t1 = this.next()) && (t2 = this.peak())) {
      if ((t1[0] === '.' || t1[0] === 'DEF') &&
          Bully.Rewriter.KEYWORDS_ALLOWED_AS_METHODS.indexOf(t2[0]) !== -1) {
        t2[0] = 'IDENTIFIER';
      }
    }

    this.reset();
  },

  add_implicit_parentheses: function() {
    var cur, next, idx, found_close;

    while ((cur = this.next()) && (next = this.peak())) {
      if (Bully.Rewriter.IMPLICIT_OPEN_PAREN_BEFORE.indexOf(cur[0]) !== -1 &&
          Bully.Rewriter.IMPLICIT_OPEN_PAREN_AFTER.indexOf(next[0]) !== -1) {

        this.insert_after(['(', '(', cur[2]]);
        this.next();
        idx = this.index;

        found_close = false;

        while ((cur = this.next())) {
          if (Bully.Rewriter.IMPLICIT_CLOSE_PAREN.indexOf(cur[0]) !== -1) {
            this.insert_before([')', ')', cur[2]]);
            this.reset(idx);
            found_close = true;
            break;
          }
        }

        // this should only happen at the end of a file
        if (!found_close) {
          cur = this.prev();
          this.insert_after([')', ')', cur[2]]);
          this.reset(idx);
        }
      }
    }

    this.reset();
  }
};

