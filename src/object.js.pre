Bully.init_object = function() {
  Bully.Kernel = Bully.define_module('Kernel');

  Bully.Kernel.to_s = function(self) {
    var klass     = Bully.real_class_of(self),
        name      = send(klass, 'name').data,
        object_id = send(self, 'object_id');

    // handle the case where class is an anonymous class, which don't have names
    if (name === "") {
      name = send(klass, 'to_s').data;
    }

    return Bully.String.make('#<' + name + ':' + object_id + '>');
  };

  Bully.define_method(Bully.Kernel, 'class', function(self, args) {
    return Bully.real_class_of(self);
  }, 0, 0);

  Bully.define_method(Bully.Kernel, 'to_s', Bully.Kernel.to_s, 0, 0);

  Bully.define_method(Bully.Kernel, 'inspect', function(self, args) {
    return Bully.dispatch_method(self, 'to_s', args);
  }, 0, 0);

  Bully.define_method(Bully.Kernel, 'respond_to?', function(self, args) {
    return Bully.respond_to(self, args[0]);
  });

  Bully.define_method(Bully.Kernel, 'send', function(self, args) {
    var name = args[0];
    
    args = args.slice(1);

    return Bully.dispatch_method(self, name, args);
  }, 1, -1);

  Bully.define_method(Bully.Kernel, '!', function(self, args) {
    return !Bully.test(self);
  }, 0, 0);

  Bully.define_module_method(Bully.Kernel, 'puts', function(self, args) {
    var str = send(args[0], 'to_s').data;
    Bully.platform.puts(str);
    return null;
  });

  Bully.define_module_method(Bully.Kernel, 'print', function(self, args) {
    var str = send(args[0], 'to_s').data;
    Bully.platform.print(str);
    return null;
  });

  Bully.define_module_method(Bully.Kernel, 'at_exit', function(self, args, block) {
    Bully.at_exit = block;
  }, 0, 0);

  Bully.Kernel.exit = function(self, args) {
    var code = args[0] || 0, at_exit = Bully.at_exit;

    Bully.at_exit = null;

    if (at_exit) {
      send(at_exit, 'call');
    }

    Bully.platform.exit(code);
  };

  Bully.define_module_method(Bully.Kernel, 'exit', Bully.Kernel.exit, 0, 1);

  Bully.Kernel.p = function(self, args) {
    var str = send(args[0], 'inspect').data;
    Bully.platform.puts(str);
    return null;
  };

  Bully.define_module_method(Bully.Kernel, 'p', Bully.Kernel.p, 1, 1);

  // raise can be called in the following ways:
  //
  //   raise
  //     - Raises current exception if there is one or StandardError
  //   raise(string)
  //     - creates RuntimeError instance with string as message and raises it
  //   raise(object)
  //     - calls #exception on object and raises result
  //   raise(object, message)
  //     - calls #exception on object, passing it message and raises result
  Bully.define_module_method(Bully.Kernel, 'raise', function(self, args) {
    var exception;

    if (args.length === 0) {
      exception = Bully.current_exception ||
        send(Bully.RuntimeError, 'new');
    }
    else if (args.length === 1) {
      if (send(args[0], 'is_a?', Bully.String)) {
        exception = send(Bully.RuntimeError, 'new', args[0]);
      }
      else if (Bully.respond_to(args[0], 'exception')) {
        exception = send(args[0], 'exception');
      }
      else {
        Bully.raise(Bully.TypeError, 'exception class/object expected');
      }
    }
    else {
      if (Bully.respond_to(args[0], 'exception')) {
        exception = send(args[0], 'exception', args[1]);
      }
      else {
        Bully.raise(Bully.TypeError, 'exception class/object expected');
      }
    }

    Bully.raise(exception);
  }, 0, 2);

  Bully.define_method(Bully.Kernel, 'is_a?', function(self, args) {
    var test_klass = args[0], klass = Bully.class_of(self);

    while (klass) {
      if (test_klass === klass) {
        return true;
      }
      else if (klass.is_include_class && klass.klass === test_klass) {
        return true;
      }

      klass = klass._super;
    }

    return false;
  }, 1, 1);

  Bully.define_method(Bully.Kernel, 'object_id', function(self, args) {
    if      (typeof self === 'number') { return 'number-' + self.toString(); }
    else if (typeof self === 'string') { return 'symbol-' + self; }
    else if (self === false)           { return 'boolean-false'; }
    else if (self === true)            { return 'boolean-true'; }
    else if (self === null)            { return 'nil-nil'; }

    return 'object-' + self.id;
  }, 0, 0);

  Bully.define_module_method(Bully.Kernel, 'require', function(self, args) {
    return Bully.require(args[0].data);
  }, 1, 1);

  // FIXME: properly alias this method
  Bully.define_method(Bully.Kernel, 'hash', Bully.Kernel.m_tbl.object_id);

  Bully.define_module_method(Bully.Kernel, '==', function(self, args) {
    return self === args[0];
  }, 1, 1);

  Bully.define_method(Bully.Kernel, 'method_missing', function(self, args) {
    var name = args[0],
        message = "undefined method '" + name + "' for " + send(self, 'inspect').data;
    Bully.raise(Bully.NoMethodError, message);
  }, 1, -1);

  Bully.define_method(Bully.Kernel, 'instance_eval', function(self, args, block) {
    return block.call(null, args, self);
  });

  Bully.define_module_method(Bully.Kernel, 'lambda', function(self, args, proc) {
    if (!proc) { Bully.raise(Bully.ArgumentError, 'tried to create a Proc object without a block'); }
    proc.is_lambda = true;

    // FIXME: procs produced by lambda need to check number of parameters
    // received.

    return proc;
  }, 0, 0);

  Bully.define_method(Bully.Kernel, 'instance_variables', function(self, args) {
    var ivars  = [],
        iv_tbl = Bully.is_immediate(self) ? Bully.immediate_iv_tbl[self] : self.iv_tbl,
        iv;

    if (iv_tbl) {
      for (iv in iv_tbl) { ivars.push(iv); }
    }

    return Bully.Array.make(ivars);
  }, 0, 0);

  Bully.define_method(Bully.Kernel, 'instance_variable_set', function(self, args) {
    var id = send(args[0], 'to_sym');

    // FIXME: make sure id is a valid id

    return Bully.ivar_set(self, id, args[1]);
  }, 2, 2);

  Bully.define_method(Bully.Kernel, 'instance_variable_get', function(self, args) {
    var id = send(args[0], 'to_sym');

    // FIXME: make sure id is a valid id

    return Bully.ivar_get(self, id);
  }, 1, 1);

  Bully.define_method(Bully.Kernel, 'nil?', function(self, args) { return false; });

  // Object
  Bully.include_module(Bully.Object, Bully.Kernel);
};
