Bully.init_module = function() {
  Bully.Module.ancestors = function(module) {
    var a = [module], _super = module._super;

    while (_super) {
      if (_super.is_include_class) {
        a.push(_super.klass);
      }
      else {
        a.push(_super);
      }

      _super = _super._super;
    }

    return Bully.Array.make(a);
  };

  Bully.define_method(Bully.Module, 'ancestors', Bully.Module.ancestors, 0, 0);

  Bully.define_method(Bully.Module, 'name', function(self, args) {
    return Bully.String.make(Bully.ivar_get(self, '__classpath__') || "");
  }, 0, 0);

  Bully.define_method(Bully.Module, 'to_s', function(self, args) {
    var obj, name;

    if (self.is_singleton_class) {
      obj = Bully.ivar_get(self, '__attached__');
      return Bully.String.make('#<Class:' + send(obj, 'to_s').data + '>');
    }

    name = Bully.VM.sendMethod(self, 'name', args);

    return name.data === "" ? Bully.Kernel.to_s(self, args) : name;
  }, 0, 0);

  Bully.define_method(Bully.Module, 'instance_methods', function(self, args) {
    var methods       = [],
        klass         = self,
        include_super = args.length > 0 ?args[0] : true, symbol;

    do {
      for (symbol in klass.m_tbl) {
        methods.push(symbol);
      }

      klass = klass._super;
    } while (klass && include_super);

    return Bully.Array.make(methods);
  }, 0, 1);

  Bully.define_method(Bully.Module, 'include', function(self, args) {
    var mod = args[0], name;

    if (!send(mod, 'is_a?', Bully.Module)) {
      name = send(send(mod, 'class'), 'name');
      Bully.raise(Bully.TypeError, 'wrong argument type ' + name.data + ' (expected Module)');
    }

    Bully.include_module(self, args[0]);

    return self;
  }, 1, 1);

  // Returns the list of modules nested at the point of call.
  Bully.define_singleton_method(Bully.Module, 'nesting', function() {
    return Bully.Array.make(Bully.VM.currentNesting());
  }, 0, 0);

  Bully.Module.attr_reader = function(self, args) {
    var len = args.length, i;

    for (i = 0; i < len; i += 1) {
      (function() {
        var method = args[i], ivar = '@' + args[i];
        Bully.define_method(self, method, function(self) {
          return Bully.ivar_get(self, ivar);
        }, 0, 0);
      }());
    }

    return null;
  };
  Bully.define_method(Bully.Module, 'attr_reader', Bully.Module.attr_reader, 1, -1);

  Bully.Module.attr_writer = function(self, args) {
    var len = args.length, i;

    for (i = 0; i < len; i += 1) {
      (function() {
        var method = args[i] + '=', ivar = '@' + args[i];
        Bully.define_method(self, method, function(self, args) {
          return Bully.ivar_set(self, ivar, args[0]);
        }, 1, 1);
      }());
    }

    return null;
  };
  Bully.define_method(Bully.Module, 'attr_writer', Bully.Module.attr_writer, 1, -1);

  Bully.Module.attr_accessor = function(self, args) {
    Bully.Module.attr_reader(self, args);
    Bully.Module.attr_writer(self, args);
    return null;
  };
  Bully.define_method(Bully.Module, 'attr_accessor', Bully.Module.attr_accessor, 1, -1);

  Bully.define_method(Bully.Module, 'const_missing', function(self, args) {
    Bully.raise(Bully.NameError, 'uninitialized constant ' + args[0]);
  }, 1, 1);

  Bully.define_method(Bully.Module, 'const_defined?', function(self, args) {
    var id = send(args[0], 'to_sym');

    return Bully.const_defined(self, id, true);
  }, 1, 1);

  Bully.define_method(Bully.Module, 'constants', function(self, args) {
    var ids = {}, ary = [], mod = self, name;

    do {
      for (name in mod.iv_tbl) {
        if (name[0] >= 'A' && name[0] <= 'Z') {
          ids[name] = 1;
        }
      }
    } while ((mod = mod._super));

    for (name in ids) {
      ary.push(name);
    }

    return Bully.Array.make(ary);
  }, 0, 0);
};

