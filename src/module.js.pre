Bully.init_module = function() {
  Bully.define_method(Bully.Module, 'name', function(self, args) {
  }, 0, 0);

  Bully.define_method(Bully.Module, 'ancestors', function(self, args) {
    var a = [self], _super = self._super;

    while (_super) {
      if (_super.is_include_class) {
        a.push(_super.klass);
      }
      else {
        a.push(_super);
      }

      _super = _super._super;
    }

    return Bully.Array.make(a);
  }, 0, 0);

  Bully.define_method(Bully.Module, 'name', function(self, args) {
    return Bully.String.make(Bully.ivar_get(self, '__classpath__'));
  }, 0, 0);

  Bully.define_method(Bully.Module, 'to_s', function(self, args) {
    var obj;

    if (self.is_singleton_class) {
      obj = Bully.ivar_get(self, '__attached__');
      return Bully.String.make('#<Class:' + send(obj, 'to_s').data + '>');
    }

    return Bully.dispatch_method(self, 'name', args);
  }, 0, 0);

  Bully.define_method(Bully.Module, 'instance_methods', function(self, args) {
    var methods       = [],
        klass         = self,
        include_super = args.length > 0 ?args[0] : true, symbol;

    do {
      for (symbol in klass.m_tbl) {
        methods.push(Bully.String.make(symbol));
      }

      klass = klass._super;
    } while (klass && include_super);

    return Bully.Array.make(methods);
  }, 0, 1);

  Bully.define_method(Bully.Module, 'include', function(self, args) {
    var mod = args[0], name;

    if (!send(mod, 'is_a?', Bully.Module)) {
      name = send(send(mod, 'class'), 'name');
      Bully.raise(Bully.TypeError, 'wrong argument type ' + name.data + ' (expected Module)');
    }

    Bully.include_module(self, args[0]);

    return self;
  }, 1, 1);

  // Returns the list of modules nested at the point of call.
  Bully.define_singleton_method(Bully.Module, 'nesting', function(self, args) {
    return Bully.Array.make(Bully.Evaluator.modules.slice().reverse());
  }, 0, 0);
};

