
# FIXME: nest this under UnitTest
class FailedAssertion < RuntimeError; end

class UnitTest
  def self.inherited(klass)
    # FIXME: use ||= here
    @classes = @classes || []
    @classes << klass
  end

  def self.run(runner = ConsoleRunner.new)
    @classes.each do |klass|
      klass.new(runner).run
    end

    runner.finish
  end

  def initialize(runner)
    @runner = runner
  end

  def tests
    # FIXME: use grep here
    self.class.instance_methods.select { |m| m.slice(0, 5) == 'test_' }
  end

  def run
    self.tests.each do |test|
      @current_result = {
        :test       => test.to_s,
        :class      => self.class.name,
        :status     => :pass,
        :message    => nil,
        :assertions => 0
      }

      begin
        if self.respond_to?(:setup)
          self.setup
        end

        self.send(test.to_sym)
      rescue FailedAssertion => e
        @current_result[:status]  = :fail
        @current_result[:message] = e.message
      rescue Exception => e
        @current_result[:status]  = :error
        @current_result[:message] = e.to_s
      end

      @runner.post_result(@current_result)
    end
  end

  def fail(message)
    raise(FailedAssertion, message)
  end

  def assert(expr, message = expr.inspect + ' is not true')
    # FIXME: use += here
    @current_result[:assertions] = @current_result[:assertions] + 1

    if !expr
      fail(message)
    end
  end

  def assert_equal(expected, expr, message = nil)
    if !message
      message = 'expected ' + expected.inspect + ' but got ' + expr.inspect + ' instead'
    end
    assert(expected == expr, message)
  end

  def assert_raise(type = Exception, message = nil)
    exception = nil

    begin
      yield
    rescue Exception => e
      exception = e
    end

    if exception
      assert(exception.is_a?(type), 'expected ' + type.inspect + ' to be raised but got ' + exception.inspect + ' instead')

      if message
        assert_equal(message, exception.message)
      end
    else
      fail('expected ' + type.inspect + ' to be raised but none was thrown')
    end
  end

  def assert_nothing_raised
    exception = nil

    begin
      yield
    rescue Exception => e
      exception = e
    end

    assert_equal(nil, exception, 'expected nothing to be raise but ' + exception.inspect + ' was raised instead')
  end

end

# FIXME: nest this under UnitTest
class ConsoleRunner
  def initialize
    @totals   = { :tests => 0, :assertions => 0, :pass => 0, :fail => 0, :error => 0 }
    @messages = []
  end

  def post_result(result)
    if result[:status] == :pass
      print('.')
    elsif result[:status] == :fail
      print('F')
      @messages << 'Failure: ' + result[:test] + '(' + result[:class] + "):\n" + result[:message]
    elsif result[:status] == :error
      print('E')
      @messages << 'Error: ' + result[:test] + '(' + result[:class] + "):\n" + result[:message]
    end

    # FIXME: implement global vars
    #$stdout.flush

    # FIXME: use += here
    @totals[result[:status]] = @totals[result[:status]] + 1
    @totals[:assertions]     = @totals[:assertions] + result[:assertions]
    @totals[:tests]          = @totals[:tests] + 1
  end

  def finish
    if @messages.any?
      puts("\n\n" + @messages.join("\n\n"))
    end

    puts("\n" + @totals[:tests].to_s + ' tests, ' + @totals[:assertions].to_s + ' assertions, ' + @totals[:fail].to_s + ' failures, ' + @totals[:error].to_s + ' errors')

    exit(@totals[:fail] + @totals[:error])
  end
end

at_exit { UnitTest.run }

