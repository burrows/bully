
class UnitTest
  class FailedAssertion < RuntimeError; end

  def self.inherited(klass)
    @classes ||= []
    @classes << klass
  end

  def self.run(runner = ConsoleRunner.new)
    @classes.each do |klass|
      klass.new(runner).run
    end

    runner.finish
  end

  def initialize(runner)
    @runner = runner
  end

  def tests
    self.class.instance_methods.grep(/^test_/)
  end

  def run
    self.tests.each do |test|
      @current_result = {
        :test       => test.to_s,
        :class      => self.class.name,
        :status     => :pass,
        :message    => nil,
        :assertions => 0
      }

      begin
        self.send(test)
      rescue FailedAssertion => e
        @current_result[:status]  = :fail
        @current_result[:message] = e.message
      rescue Exception => e
        @current_result[:status]  = :error
        @current_result[:message] = e.message
      end

      @runner.post_result(@current_result)
    end
  end

  def assert(expr, message = "#{expr.inspect} is not true")
    @current_result[:assertions] += 1

    if !expr
      raise FailedAssertion, message
    end
  end

  class ConsoleRunner
    def initialize
      @totals   = { :tests => 0, :assertions => 0, :pass => 0, :fail => 0, :error => 0 }
      @messages = []
    end

    def post_result(result)
      if result[:status] == :pass
        print '.'
      elsif result[:status] == :fail
        print 'F'
        @messages << "Failure: #{result[:test]}(#{result[:class]}):\n#{result[:message]}"
      elsif result[:status] == :error
        print 'E'
        @messages << "Error: #{result[:test]}(#{result[:class]}):\n#{result[:message]}"
      end

      $stdout.flush

      @totals[result[:status]] += 1
      @totals[:assertions]     += result[:assertions]
      @totals[:tests]          += 1
    end

    def finish
      puts "\n\n" + @messages.join("\n\n") if @messages.any?
      puts "\n#{@totals[:tests]} tests, #{@totals[:assertions]} assertions, #{@totals[:fail]} failures, #{@totals[:error]} errors"

      exit @totals[:fail] + @totals[:error]
    end
  end
end

class MyTest < UnitTest
  def setup
  end

  def teardown
  end

  def test_foo
    assert(true)
    assert(true)
    assert(true)
    assert(true)
    assert(false, 'i failed')
  end

  def test_bar
    assert(true)
  end

  def test_baz
    assert(true)
    raise "ugh"
  end
end

class MyOtherTest < UnitTest
  def test_a
    assert(9)
  end

  def test_b
    assert(nil)
  end
end

UnitTest.run

