require('unit_test')

class ProcTest < UnitTest
  def test_creating_a_Proc_without_a_block_should_raise_an_ArgumentError_exception
    assert_raise(ArgumentError, 'tried to create a Proc object without a block') do
      Proc.new
    end
  end

  def test_Proc_instances_can_be_called
    p = Proc.new { 9 }
    assert_equal(9, p.call)
  end

  def test_Proc_instances_can_be_called_with_arguments
    p = Proc.new { |a,b,c| [a,b,c] }
    assert_equal(['foo', 'bar', 'baz'], p.call('foo', 'bar', 'baz'))
  end

  def test_Proc_instances_can_have_splat_params
    p = Proc.new { |a,b,*c| [a,b,c] }
    assert_equal([1,2,[]], p.call(1,2))
    assert_equal([1,2,[3,4,5]], p.call(1,2,3,4,5))
  end

  def test_Proc_instances_called_with_fewer_than_the_number_of_defined_arguments_fill_the_remaining_arguments_with_nil
    p = Proc.new { |a,b,c| [a,b,c] }
    assert_equal(['foo', 'bar', nil], p.call('foo', 'bar'))
    assert_equal([nil, nil, nil], p.call)
  end

  def test_procs_have_access_to_local_variables_in_the_scope_they_are_defined_in
    some_var = 147
    some_other_var = :helloworld

    p = Proc.new { [some_var, some_other_var] }

    assert_equal([147, :helloworld], p.call)

    some_var = 8

    assert_equal([8, :helloworld], p.call)
  end

  def test_procs_should_clobber_local_variables_declared_in_their_outer_scope
    foo = 'outer'

    p = Proc.new { foo = 'inner' }

    assert_equal('outer', foo)
    p.call
    assert_equal('inner', foo)
  end

  def test_procs_with_params_with_the_same_name_as_local_variables_in_the_outer_scope_should_shadow_the_local_variables
    foo = 'outer'

    p = Proc.new { |foo| foo = 'inner' }

    assert_equal('outer', foo)
    p.call
    assert_equal('outer', foo)
  end
end

