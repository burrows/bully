require('unit_test')

# x exception class hierarchy
# x Exception.exception method
# * raise with no arguments should re-raise exception
# * multiple exception types on a rescue block
# * multiple rescue clauses
# * rescue clause with no parameter list defaults to StandardError
# * ensure clauses
# * else clause
# * retry should re-run block
# * raise with no args should raise the current exception or RuntimeError if there is no current exception
# * raise with string arg should create a RuntimeError setting its message to the string
# * raise with Exception class
# * raise with Exception class and string arg
# * raise with Exception instance
# * raise with object instance that responds to #exception
# * raise with object instance that does not respond to #exception

class ErrorTestException1 < StandardError; end
class ErrorTestException2 < StandardError; end

class ErrorTestFoo
  def exception(message = nil)
    ErrorTestException2.new(message)
  end
end

class ErrorTest < UnitTest
  def test_superclass_of_Exception_should_be_Object
    assert_equal(Object, Exception.superclass)
  end

  def test_superclass_of_StandardError_should_be_Exception
    assert_equal(Exception, StandardError.superclass)
  end

  def test_superclass_of_ArgumentError_should_be_StandardError
    assert_equal(StandardError, ArgumentError.superclass)
  end

  def test_superclass_of_RuntimeError_should_be_StandardError
    assert_equal(StandardError, RuntimeError.superclass)
  end

  def test_superclass_of_NameError_should_be_StandardError
    assert_equal(StandardError, NameError.superclass)
  end

  def test_superclass_of_TypeError_should_be_StandardError
    assert_equal(StandardError, TypeError.superclass)
  end

  def test_superclass_of_NoMethodError_should_be_NameError
    assert_equal(NameError, NoMethodError.superclass)
  end

  def test_Exception_constructor_with_no_arguments_should_set_message_to_class_name
    assert_equal('Exception', Exception.new.message)
    assert_equal('NoMethodError', NoMethodError.new.message)
  end

  def test_Exception_constructor_with_one_argument_should_set_the_argument_as_the_message
    assert_equal('my message', Exception.new('my message').message)
    assert_equal(12, Exception.new(12).message)
  end

  def test_Exception_constructor_with_more_than_one_argument_should_raise_ArgumentError_exception
    assert_raise(ArgumentError, 'wrong number of arguments (2 for 1)') do
      Exception.new(1,2)
    end
  end

  def test_Exception_exception_method_with_no_arguments_should_return_an_instance_of_the_class
    e1 = Exception.exception
    e2 = NameError.exception

    assert_equal(Exception, e1.class)
    assert_equal('Exception', e1.message)
    assert_equal(NameError, e2.class)
    assert_equal('NameError', e2.message)
  end

  def test_Exception_exception_method_with_one_arguments_should_return_an_instance_of_the_class_with_message_set_to_argument
    e = Exception.exception('foo')

    assert_equal(Exception, e.class)
    assert_equal('foo', e.message)
  end

  def test_Exception_exception_method_with_more_than_one_argument_should_raise_ArgumentError_exception
    assert_raise(ArgumentError, 'wrong number of arguments (2 for 1)') do
      Exception.exception(1,2)
    end
  end

  def test_raise_with_no_arguments_and_no_current_exception_should_raise_RuntimeError_exception
    exception = nil
    begin
      raise
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(RuntimeError, e.class)
  end

  def test_raise_with_no_arguments_and_a_current_exception_should_raise_the_current_exception
    exception = nil
    reraise = false

    begin
      begin
        raise(ErrorTestException1, 'hello from inner begin block')
      rescue ErrorTestException1
        reraise = true
        raise
      end
    rescue Exception => e
      exception = e
    end

    assert(exception, 'no exception rescued')
    assert(reraise, 'raise never called')
    assert_equal(ErrorTestException1, exception.class)
    assert_equal('hello from inner begin block', exception.message)
  end

  def test_raise_with_a_string_argument_should_create_a_RuntimeError_with_the_given_string_as_the_message
    exception = nil
    begin
      raise("foo bar baz")
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(RuntimeError, e.class)
    assert_equal("foo bar baz", e.message)
  end

  def test_raise_with_an_Exception_class_argument_should_raise_and_instance_of_the_class
    exception = nil
    begin
      raise(ErrorTestException1)
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(ErrorTestException1, e.class)
  end

  def test_raise_with_an_Exception_class_and_string_arguments_should_raise_and_instance_of_the_class_with_the_given_message
    exception = nil
    begin
      raise(ErrorTestException1, 'this is the message')
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(ErrorTestException1, e.class)
    assert_equal('this is the message', e.message)
  end

  def test_raise_with_an_object_that_responds_to_the_exception_method_should_raise_the_result_of_the_exception_method
    exception = nil
    begin
      raise(ErrorTestFoo.new)
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(ErrorTestException2, e.class)
    assert_equal('ErrorTestException2', e.message)
  end

  def test_raise_with_an_object_that_responds_to_the_exception_method_and_a_second_argument_should_pass_the_second_argument_to_the_exception_method
    exception = nil
    begin
      raise(ErrorTestFoo.new, 'some message')
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal('some message', e.message)
  end

  def test_raise_with_an_object_that_does_not_respond_to_the_exception_method_should_raise_TypeError_exception
    assert_raise(TypeError, 'exception class/object expected') do
      raise(Object.new)
    end

    assert_raise(TypeError, 'exception class/object expected') do
      raise(Object.new, 'message')
    end
  end

  def test_raise_should_stop_execution_of_the_current_begin_block
    a = false
    b = false

    begin
      a = true
      raise(Exception, 'foo')
      b = true
    rescue Exception => e
    end

    assert_equal(true, a)
    assert_equal(false, b)
  end
end
