require('unit_test')

class ErrorTestException1 < StandardError; end
class ErrorTestException2 < StandardError; end

class ErrorTestFoo
  def exception(message = nil)
    ErrorTestException2.new(message)
  end
end

class ErrorTest < UnitTest
  def test_superclass_of_Exception_should_be_Object
    assert_equal(Object, Exception.superclass)
  end

  def test_superclass_of_StandardError_should_be_Exception
    assert_equal(Exception, StandardError.superclass)
  end

  def test_superclass_of_ArgumentError_should_be_StandardError
    assert_equal(StandardError, ArgumentError.superclass)
  end

  def test_superclass_of_RuntimeError_should_be_StandardError
    assert_equal(StandardError, RuntimeError.superclass)
  end

  def test_superclass_of_NameError_should_be_StandardError
    assert_equal(StandardError, NameError.superclass)
  end

  def test_superclass_of_TypeError_should_be_StandardError
    assert_equal(StandardError, TypeError.superclass)
  end

  def test_superclass_of_NoMethodError_should_be_NameError
    assert_equal(NameError, NoMethodError.superclass)
  end

  def test_Exception_constructor_with_no_arguments_should_set_message_to_class_name
    assert_equal('Exception', Exception.new.message)
    assert_equal('NoMethodError', NoMethodError.new.message)
  end

  def test_Exception_constructor_with_one_argument_should_set_the_argument_as_the_message
    assert_equal('my message', Exception.new('my message').message)
    assert_equal(12, Exception.new(12).message)
  end

  def test_Exception_constructor_with_more_than_one_argument_should_raise_ArgumentError_exception
    assert_raise(ArgumentError, 'wrong number of arguments (2 for 1)') do
      Exception.new(1,2)
    end
  end

  def test_Exception_exception_method_with_no_arguments_should_return_an_instance_of_the_class
    e1 = Exception.exception
    e2 = NameError.exception

    assert_equal(Exception, e1.class)
    assert_equal('Exception', e1.message)
    assert_equal(NameError, e2.class)
    assert_equal('NameError', e2.message)
  end

  def test_Exception_exception_method_with_one_arguments_should_return_an_instance_of_the_class_with_message_set_to_argument
    e = Exception.exception('foo')

    assert_equal(Exception, e.class)
    assert_equal('foo', e.message)
  end

  def test_Exception_exception_method_with_more_than_one_argument_should_raise_ArgumentError_exception
    assert_raise(ArgumentError, 'wrong number of arguments (2 for 1)') do
      Exception.exception(1,2)
    end
  end

  def test_raise_with_no_arguments_and_no_current_exception_should_raise_RuntimeError_exception
    exception = nil
    begin
      raise
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(RuntimeError, e.class)
  end

  def test_raise_with_no_arguments_and_a_current_exception_should_raise_the_current_exception
    exception = nil
    reraise = false

    begin
      begin
        raise(ErrorTestException1, 'hello from inner begin block')
      rescue ErrorTestException1
        reraise = true
        raise
      end
    rescue Exception => e
      exception = e
    end

    assert(exception, 'no exception rescued')
    assert(reraise, 'raise never called')
    assert_equal(ErrorTestException1, exception.class)
    assert_equal('hello from inner begin block', exception.message)
  end

  def test_raise_with_a_string_argument_should_create_a_RuntimeError_with_the_given_string_as_the_message
    exception = nil
    begin
      raise("foo bar baz")
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(RuntimeError, e.class)
    assert_equal("foo bar baz", e.message)
  end

  def test_raise_with_an_Exception_class_argument_should_raise_and_instance_of_the_class
    exception = nil
    begin
      raise(ErrorTestException1)
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(ErrorTestException1, e.class)
  end

  def test_raise_with_an_Exception_class_and_string_arguments_should_raise_and_instance_of_the_class_with_the_given_message
    exception = nil
    begin
      raise(ErrorTestException1, 'this is the message')
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(ErrorTestException1, e.class)
    assert_equal('this is the message', e.message)
  end

  def test_raise_with_an_object_that_responds_to_the_exception_method_should_raise_the_result_of_the_exception_method
    exception = nil
    begin
      raise(ErrorTestFoo.new)
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal(ErrorTestException2, e.class)
    assert_equal('ErrorTestException2', e.message)
  end

  def test_raise_with_an_object_that_responds_to_the_exception_method_and_a_second_argument_should_pass_the_second_argument_to_the_exception_method
    exception = nil
    begin
      raise(ErrorTestFoo.new, 'some message')
    rescue Exception => e
      exception = e
    end

    assert(exception)
    assert_equal('some message', e.message)
  end

  def test_raise_with_an_object_that_does_not_respond_to_the_exception_method_should_raise_TypeError_exception
    assert_raise(TypeError, 'exception class/object expected') do
      raise(Object.new)
    end

    assert_raise(TypeError, 'exception class/object expected') do
      raise(Object.new, 'message')
    end
  end

  def test_raise_should_stop_execution_of_the_current_begin_block
    a = false
    b = false

    begin
      a = true
      raise(Exception, 'foo')
      b = true
    rescue Exception => e
    end

    assert_equal(true, a)
    assert_equal(false, b)
  end

  def test_rescue_with_no_parameter_list_should_capture_exceptions_of_type_StandardError
    standard_rescued = false
    exception_rescued = false

    assert_nothing_raised do
      begin
        raise(StandardError)
      rescue
        standard_rescued = true
      end
    end
    assert(standard_rescued, 'StandardError not rescued')

    assert_raise(Exception) do
      begin
        raise(Exception)
      rescue
        exception_rescued = true
      end
    end
    assert(!exception_rescued, 'Exception was rescued')
  end

  def test_begin_block_with_multiple_rescues_should_choose_first_rescue_clause_with_matching_exception_type
    first = false
    second = false
    third = false

    assert_nothing_raised do
      begin
        raise(ErrorTestException2)
      rescue ErrorTestException1
        first = true
      rescue ErrorTestException2
        second = true
      rescue Exception
        third = true
      end
    end

    assert(!first, 'first rescue block invoked')
    assert(second, 'second rescue block not invoked')
    assert(!third, 'third rescue block invoked')
  end

  def test_rescue_clause_with_multiple_exception_types_should_match_exceptions_that_match_any_of_the_types
    rescued1 = false
    rescued2 = false

    assert_nothing_raised do
      begin
        raise(ErrorTestException1)
      rescue ErrorTestException1, ErrorTestException2
        rescued1 = true
      end
    end

    assert(rescued1, 'exception1 not rescued')

    assert_nothing_raised do
      begin
        raise(ErrorTestException2)
      rescue ErrorTestException1, ErrorTestException2
        rescued2 = true
      end
    end

    assert(rescued2, 'exception2 not rescued')
  end

  def test_ensure_clause_should_be_evaluated_when_no_exceptions_are_raised
    ensured = false

    begin
      1 + 1
    ensure
      ensured = true
    end

    assert(ensured, 'ensure clause not evaluated')
  end

  def test_ensure_clause_should_be_evaluated_when_an_exception_is_raised_and_rescued
    ensured = false
    rescued = false

    begin
      raise
    rescue Exception
      rescued = true
    ensure
      ensured = true
    end

    assert(rescued, 'rescue clause not evaluated')
    assert(ensured, 'ensure clause not evaluated')
  end

  def test_ensure_clause_should_be_evaluated_when_an_exception_is_raised_and_not_rescued
    ensured = false

    assert_raise do
      begin
        raise
      ensure
        ensured = true
      end
    end

    assert(ensured, 'ensure clause not evaluated')
  end

  def test_else_clause_should_not_be_evaluated_when_no_exceptions_are_raised
    else_evaluated = false

    begin
      :foo
    rescue
    else
      else_evaluated = true
    end

    assert(!else_evaluated, 'else was evaluated')
  end

  def test_else_clause_should_not_be_evaluated_when_exception_is_raised_and_rescued
    else_evaluated = false
    rescue_evaluated = false

    begin
      raise(ErrorTestException1)
    rescue ErrorTestException1
      rescue_evaluated = true
    else
      else_evaluated = true
    end

    assert(rescue_evaluated, 'rescue was not evaluated')
    assert(!else_evaluated, 'else was evaluated')
  end

  def test_else_clause_should_be_evaluated_when_exception_is_raised_and_not_rescued
    else_evaluated = false
    rescue_evaluated = false

    assert_raise do
      begin
        raise(ErrorTestException1)
      rescue ErrorTestException2
        rescue_evaluated = true
      else
        else_evaluated = true
      end
    end

    assert(!rescue_evaluated, 'rescue was evaluated')
    assert(else_evaluated, 'else was not evaluated')
  end
end

