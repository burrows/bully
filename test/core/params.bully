require('unit_test')

class ParamsTestClass
  def required_only(req1, req2)
    {:req1 => req1, :req2 => req2}
  end

  def optional_only(opt1='opt1', opt2=:opt2)
    {:opt1 => opt1, :opt2 => opt2}
  end

  def splat_only(*splat)
    splat
  end

  def req_and_opt(req1, req2, opt1='opt1', opt2='opt2')
    {:req1 => req1, :req2 => req2, :opt1 => opt1, :opt2 => opt2}
  end

  def req_opt_and_splat(req1, req2, opt1='opt1', opt2='opt2', *splat)
    {:req1 => req1, :req2 => req2, :opt1 => opt1, :opt2 => opt2, :splat => splat}
  end
end

class ParamsTest < UnitTest
  def setup
    @params_test = ParamsTestClass.new
  end

  def test_required_params_are_available_in_method_body
    results = @params_test.required_only(1,'a')
    assert_equal(1, results[:req1])
    assert_equal('a', results[:req2])
  end

  def test_optional_params_are_available_in_method_body
    results = @params_test.optional_only(1,2)
    assert_equal(1, results[:opt1])
    assert_equal(2, results[:opt2])
  end

  def test_optional_params_should_be_set_to_default_when_not_passed
    results = @params_test.optional_only(1)
    assert_equal(1, results[:opt1])
    assert_equal(:opt2, results[:opt2])
    results = @params_test.optional_only
    assert_equal('opt1', results[:opt1])
    assert_equal(:opt2, results[:opt2])
  end

  def test_splat_param_should_gather_all_remaining_arguments_into_an_array
    assert_equal([1,2,3], @params_test.splat_only(1,2,3))
    assert_equal([:one, :two, 333, 'four'], @params_test.splat_only(:one, :two, 333, 'four'))
  end

  def test_required_and_optional_should_properly_assign_variables
    results = @params_test.req_and_opt('a', 'b')
    assert_equal('a', results[:req1])
    assert_equal('b', results[:req2])
    assert_equal('opt1', results[:opt1])
    assert_equal('opt2', results[:opt2])

    results = @params_test.req_and_opt('a', 'b', 'foo')
    assert_equal('a', results[:req1])
    assert_equal('b', results[:req2])
    assert_equal('foo', results[:opt1])
    assert_equal('opt2', results[:opt2])

    results = @params_test.req_and_opt('a', 'b', 'foo', 'bar')
    assert_equal('a', results[:req1])
    assert_equal('b', results[:req2])
    assert_equal('foo', results[:opt1])
    assert_equal('bar', results[:opt2])
  end

  def test_required_optional_and_splat_should_properly_assign_variables
    results = @params_test.req_opt_and_splat('a', 'b')
    assert_equal('a', results[:req1])
    assert_equal('b', results[:req2])
    assert_equal('opt1', results[:opt1])
    assert_equal('opt2', results[:opt2])
    assert_equal([], results[:splat])

    results = @params_test.req_opt_and_splat('a', 'b', 'foo')
    assert_equal('a', results[:req1])
    assert_equal('b', results[:req2])
    assert_equal('foo', results[:opt1])
    assert_equal('opt2', results[:opt2])
    assert_equal([], results[:splat])

    results = @params_test.req_opt_and_splat('a', 'b', 'foo', 'bar')
    assert_equal('a', results[:req1])
    assert_equal('b', results[:req2])
    assert_equal('foo', results[:opt1])
    assert_equal('bar', results[:opt2])
    assert_equal([], results[:splat])

    results = @params_test.req_opt_and_splat('a', 'b', 'foo', 'bar', 1, 2, 3)
    assert_equal('a', results[:req1])
    assert_equal('b', results[:req2])
    assert_equal('foo', results[:opt1])
    assert_equal('bar', results[:opt2])
    assert_equal([1, 2 ,3], results[:splat])
  end

  def test_passing_too_few_required_arguments_should_raise_ArgumentError_exception
    assert_raise(ArgumentError, 'wrong number of arguments (0 for 2)') do
      @params_test.required_only
    end

    assert_raise(ArgumentError, 'wrong number of arguments (1 for 2)') do
      @params_test.required_only(1)
    end
  end

  def test_passing_too_many_required_arguments_should_raise_ArgumentError_exception
    assert_raise(ArgumentError, 'wrong number of arguments (3 for 2)') do
      @params_test.required_only(1,2,3)
    end

    assert_raise(ArgumentError, 'wrong number of arguments (4 for 2)') do
      @params_test.required_only(1,2,3,4)
    end
  end

  def test_methods_with_optional_params_should_allow_between_the_number_of_require_params_and_the_number_of_required_plus_optional
    assert_raise(ArgumentError, 'wrong number of arguments (1 for 2)') do
      @params_test.req_and_opt(1)
    end

    assert_nothing_raised do
      @params_test.req_and_opt(1, 2)
      @params_test.req_and_opt(1, 2, 3)
      @params_test.req_and_opt(1, 2, 3, 4)
    end

    assert_raise(ArgumentError, 'wrong number of arguments (5 for 4)') do
      @params_test.req_and_opt(1,2,3,4,5)
    end
  end

  def test_methods_with_splat_params_should_have_no_upper_bound_on_the_number_of_arguments
    assert_raise(ArgumentError, 'wrong number of arguments (1 for 2)') do
      @params_test.req_opt_and_splat(1)
    end

    assert_nothing_raised do
      @params_test.req_opt_and_splat(1,2)
      @params_test.req_opt_and_splat(1,2,3)
      @params_test.req_opt_and_splat(1,2,3,4)
      @params_test.req_opt_and_splat(1,2,3,4,5)
      @params_test.req_opt_and_splat(1,2,3,4,5,6)
      @params_test.req_opt_and_splat(1,2,3,4,5,6,7)
      @params_test.req_opt_and_splat(1,2,3,4,5,6,7,8)
    end
  end

  def test_methods_with_only_optional_params_should_allow_up_to_the_number_of_optional_params
    assert_nothing_raised do
      @params_test.optional_only
      @params_test.optional_only(1)
      @params_test.optional_only(1, 2)
    end

    assert_raise(ArgumentError, 'wrong number of arguments (3 for 2)') do
      @params_test.optional_only(1, 2, 3)
    end
 
    assert_raise(ArgumentError, 'wrong number of arguments (4 for 2)') do
      @params_test.optional_only(1, 2, 3, 4)
    end
  end

  def test_methods_with_only_a_splat_param_should_not_have_any_bounds_on_the_number_of_arguments
    assert_nothing_raised do
      @params_test.splat_only
      @params_test.splat_only(1)
      @params_test.splat_only(1,2)
      @params_test.splat_only(1,2,3)
      @params_test.splat_only(1,2,3,4)
      @params_test.splat_only(1,2,3,4,5)
    end
  end
end

