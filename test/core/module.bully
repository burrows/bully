require('unit_test')

module TestModule1
  def mod_method1; end
  def mod_method2; end
end

class ModuleTest < UnitTest
  def test_class_of_Module_is_Class
    assert_equal(Class, Module.class)
  end

  def test_superclass_of_Module_is_Object
    assert_equal(nil, Object.superclass)
  end

  def test_name_method_should_return_name_of_module
    assert_equal('TestModule1', TestModule1.name)
  end

  def test_to_s_method_should_return_name_of_module
    assert_equal('TestModule1', TestModule1.to_s)
  end

  def test_inspect_method_should_return_name_of_module
    assert_equal('TestModule1', TestModule1.inspect)
  end

  def test_ancestors_method_should_return_modules_inheritance_chain
    assert_equal([Object, Kernel], Object.ancestors)
    assert_equal([Module, Object, Kernel], Module.ancestors)
    assert_equal([Class, Module, Object, Kernel], Class.ancestors)
    assert_equal([Kernel], Kernel.ancestors)
  end

  def test_instance_methods_method_should_return_a_list_of_all_instance_methods_define_directly_on_the_module
    assert_equal(['mod_method1', 'mod_method2'], TestModule1.instance_methods(false))
    assert_equal(['mod_method1', 'mod_method2'], TestModule1.instance_methods(true))
    assert_equal(['mod_method1', 'mod_method2'], TestModule1.instance_methods)
  end
end

