require('unit_test')

class NumberTest < UnitTest
  def test_to_s_method_should_return_string_represention_of_number
    assert_equal('9', 9.to_s)
    assert_equal('112', 112.to_s)
  end

  def test_inspect_method_should_return_string_represention_of_number
    assert_equal('9', 9.inspect)
    assert_equal('112', 112.inspect)
  end

  def test_unary_plus
    n1 = -2
    n2 = 12

    assert_equal(-2, +n1)
    assert_equal(12, +n2)
  end

  def test_unary_minus
    n1 = -2
    n2 = 12

    assert_equal(2, -n1)
    assert_equal(-12, -n2)
  end

  def test_addition
    assert_equal(4, 2 + 2)
    assert_equal(8, 10 + -2)
  end

  def test_subtraction
    assert_equal(18, 20 - 2)
    assert_equal(-10, 20 - 30)
  end

  def test_multiplication
    assert_equal(21, 7 * 3)
    assert_equal(-8, -2 * 4)
  end

  def test_division
    assert_equal(22, 88 / 4)
    assert_equal(4.5, 9 / 2)
  end

  def test_modulus
    assert_equal(0, 8 % 2)
    assert_equal(5, 21 % 8)
  end

  def test_left_shift
    assert_equal(32, 8 << 2)
    assert_equal(-32, -8 << 2)
  end

  def test_right_shift
    assert_equal(14, 112 >> 3)
    assert_equal(0, 1 >> 1)
  end

  def test_exponential
    assert_equal(8, 2 ** 3)
  end

  def test_greater_than
    assert_equal(true, 5 > 2)
    assert_equal(false, 21 > 87)
  end

  def test_compare
    assert_equal(1, 1 <=> 2)
    assert_equal(-1, 2 <=> 1)
    assert_equal(0, 2 <=> 2)
  end

  def test_double_equal
    assert_equal(true, 9 == 9)
    assert_equal(false, 9 == 10)
  end

  def test_not_equal
    assert_equal(false, 9 != 9)
    assert_equal(true, 9 != 10)
  end

  def test_less_than
    assert_equal(true, 187 < 212)
    assert_equal(false, 88 < 19)
  end

  def test_times_should_yield_to_block_n_times
    n = 0

    10.times { n = n + 1 }

    assert_equal(10, n)
  end

  def test_times_should_yield_the_current_index_to_the_block
    x = []
    5.times { |i| x << i }
    assert_equal([0,1,2,3,4], x)
  end
    
end

