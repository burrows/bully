#!/usr/bin/env node

var sys          = require('sys'),
    path         = require('path'),
    fs           = require('fs'),
    opts         = require('../vendor/opts'),
    Bully        = require('../src/bully').Bully,
    selectedOpts = {};

var options = [
  {
    short       : 't',
    long        : 'tokens',
    description : 'Print the tokens produced by the lexer',
    callback    : function() { selectedOpts.tokens = true; }
  },
  {
    short       : 'p',
    long        : 'parse',
    description : 'Print the parse tree',
    callback    : function() { selectedOpts.nodes = true; }
  },
  {
    short       : 'c',
    long        : 'compile',
    description : 'Print the compiled instruction sequence',
    callback    : function() { selectedOpts.compile = true; }
  },
  {
    short       : 'e',
    long        : 'eval',
    description : 'Evaluate the given Bully code',
    value       : true,
    callback    : function(code) { selectedOpts.eval = code; }
  },
  {
    short       : 'h',
    long        : 'help',
    description : 'Show this help message',
    callback    : function() { selectedOpts.help = true; }
  }
];

function printTokens(file) {
  sys.puts(sys.inspect((new Bully.Lexer()).tokenize(fs.readFileSync(file, 'ascii'))));
};

function printParseTree(file) {
  var ast = Bully.parser.parse((new Bully.Lexer()).tokenize(fs.readFileSync(file, 'ascii')));
  sys.puts(sys.inspect(ast, false, null));
};

function printISeq(file) {
  var ast = Bully.parser.parse((new Bully.Lexer()).tokenize(fs.readFileSync(file, 'ascii')));
  sys.puts(sys.inspect(Bully.Compiler.compile(ast), false, null));
};

function evaluateCode(code) {
  var exit_code = 0, ast;

  ast = Bully.parser.parse((new Bully.Lexer()).tokenize(code));
  exit_code = Bully.Evaluator.evaluate(ast);

  Bully.VM.sendMethod(Bully.main, 'exit', exit_code);
};

function evaluateFiles(files) {
  var exit_code = 0, i, ast, iseq;

  for (i = 0; i < files.length && exit_code === 0; i++) {
    ast = Bully.parser.parse((new Bully.Lexer()).tokenize(fs.readFileSync(files[i], 'ascii')));
    iseq = Bully.Compiler.compile(ast);

    exit_code = Bully.VM.run(iseq);
  }

  Bully.VM.sendMethod(Bully.main, 'exit', exit_code);
};

opts.parse(options);

if (selectedOpts.help)         { opts.help();                     }
else if (selectedOpts.tokens)  { printTokens(opts.args()[0]);     }
else if (selectedOpts.nodes)   { printParseTree(opts.args()[0]);  }
else if (selectedOpts.compile) { printISeq(opts.args()[0]);       }
else if (selectedOpts.eval)    { evaluateCode(selectedOpts.eval); }
else                           { evaluateFiles(opts.args());      }

